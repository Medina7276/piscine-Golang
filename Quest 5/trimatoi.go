package piscine

func IntCheck(s string) bool { // проверяю есть ли в этой строке хоть одна руна-цифра
	ok := false           // завожу переменную проверки
	for _, c := range s { // проверяем каждую руну в диапозоне нашей строки
		if c >= '0' && c <= '9' { // если руна-цифра
			ok = true //меняем нашу переменную проверки
			break     // и сразу выходим из цикла
		}
	}
	return ok // выводим нашу переменную проверки
}

func MinusCheck(s string) bool { // проверяю есть ли руна-минус в начале строки
	minus := false        // завожу переменную проверки
	for _, c := range s { // пробегаюсь по каждой руне в строке
		if c >= '0' && c <= '9' { // если это руна - руна-цифра, и она встретилась раньше руны-минус,
			break // выхожу из цикла, так как минус этот учитывать не будем, потому что он стоит полсе цифры
		}
		if c == '-' { // если же руна-минус стоит перед цифрой, то мы учитываем этот минус
			minus = true // и меняем переменную проверкиа
		}
	}
	return minus
}

func TrimAtoi(s string) int { // наша основная функция
	x := 0                   // заводим переменную, конечное значение которой будет нашим ответом
	if IntCheck(s) == true { // если в строке есть цифры,
		for _, c := range s { // то пробегаюсь по ней
			if c >= '0' && c <= '9' { // ищу руны-цифры
				k := 0                      // завожу счетчик, который будет интовой версией нашей руны-цифры
				for i := '1'; i <= c; i++ { // создаю цикл, который будет переводить руну-цифру в цифру-цифру, рунами пробегаемся до значения
					k++ // руны-цифры, и с каждым разом увеличиваю нашу цифру-цифру
				}
				x = x*10 + k // изменяем наш ответ в зависимости от количества найденных в строке цифр-цифр
			}
		}
	}
	if MinusCheck(s) { // проверяю на наличие правильного минуса
		x *= -1 // и если он есть, меняю знак нашего ответа
	}
	return x
}
